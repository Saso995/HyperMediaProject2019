openapi: "3.0.0"
info:
  title: eCommerce webSite API
  description: 'This is a bookstore server with a book inventory, users with a shopping cart, a collection of event where the authors present their books.'
  version: "1.0.0"
  contact:
    email: "some_email@gmail.com"
tags:
  - name: "Book"
    description: "Available book"
  - name: "Cart"
    description: "Access to the cart"
  - name: "User"
    description: "Operations about user"
  - name: "Event"
    description: "Access to the events"
  - name: "Author"
    description: "Available authors"
paths:
  /book:
    get:
      tags:
      - Book
      summary: "Books available in the inventory."
      description: "List of books available in the inventory"
      operationId: getBook
      parameters:
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/ISBN'
        - $ref: '#/components/parameters/author'
        - $ref: '#/components/parameters/genre'
        - $ref: '#/components/parameters/theme'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: "Invalid input supplied"
        '404':
          description: "No books founded"
  /book/{bookID}:
    get:
      tags:
      - Book
      summary: "get book by ID"
      description: "return the information of a specific book through his ID"
      operationId: getBookId
      parameters:
      - name: "bookID"
        in: "path"
        description: "The book's id that needs to be fetched."
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: "Invalid id supplied"
        '404':
          description: "Book not found"
  /event:
    get:
      tags:
      - Event
      summary: "Events available."
      description: "List of the events available in our website."
      operationId: getEvent
      parameters:
        - $ref: '#/components/parameters/eventAuthor'
        - $ref: '#/components/parameters/eventDate'
        - $ref: '#/components/parameters/eventLocation'
        - $ref: '#/components/parameters/eventBook'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: "Invalid input supplied"
        '404':
          description: "No events founded"
  /event/{eventID}:
    get:
      tags:
      - Event
      summary: "get event by ID"
      description: "return the information of a specific event through his ID"
      operationId: getEventId
      parameters:
      - name: "eventID"
        in: "path"
        description: "The event's id that needs to be fetched."
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: "Invalid id supplied"
        '404':
          description: "Event not found"
  /author:
    get:
      tags:
      - Author
      summary: "List of authors"
      description: "return a list alphabetically ordered of all the authors available in our website"
      operationId: getAuthor
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          description: "unexpected error"
  /author/{authorID}:
    get:
      tags:
        - Author
      summary: "get author by ID"
      description: "return the information of a specific author through his ID"
      operationId: getAuthorId
      parameters:
      - name: "authorID"
        in: "path"
        description: "The author's id that needs to be fetched."
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: "Invalid id supplied"
        '404':
          description: "Author not found"
  /user/register:
    post:
      tags:
      - User
      summary: "Register"
      description: "Register into the store"
      operationId: "userRegisterPOST"
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '201':
          description: 'Successful Created'
        '400':
          description: "Registration failed"
  /user/login:
    post:
      tags:
      - User
      summary: "Login"
      description: "Login with a form"
      operationId: "userLoginPOST"
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        '200':
          description: "successful operation"
        '400':
          description: "Invalid username/password supplied"
  /user/logout:
    post:
      tags:
      - User
      summary: "Logout"
      description: "Logs out current logged in user session"
      operationId: "logoutUser"
      parameters: []
      responses:
        default:
          description: "successful operation"
#RIVEDERE DA QUI IN POI
  /user/{username}:
    get:
      tags:
        - User
      summary: "Get user by user name"
      operationId: "getUserByName"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: "Invalid username supplied"
        '404':
          description: "User not found"
    put:
      tags:
        - User
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        schema:
          type: "string"
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '202':
          description: "User updated successfully"
        '400':
          description: "Invalid user supplied"
        '404':
          description: "User not found"
    delete:
      tags:
        - User
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "User deleted successfully"
        '400':
          description: "Invalid username supplied"
        '404':
          description: "User not found"
  /cart/{userID}:
    get:
      tags:
      - Cart
      summary: "Show the content of the shopping cart of an user"
      operationId: getCart
      parameters:
      - name: userID
        in: path
        description: "The id of the user that wants to see his cart"
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    post:
      tags:
      - Cart
      summary: "Add a books into the shopping cart"
      operationId: addBook
      parameters:
      - name: userID
        in: path
        description: "The name of the owner of the cart"
        required: true
        schema:
          type: string
      - name: book
        in: query
        description: "The book the user wants to add"
        required: true
        schema:
          type: string
          description: "the id/isbn of the selected book"
      responses:
        '200':
          description: 'successful operation'
    delete:
      tags:
      - Cart
      summary: "Delete book"
      description: "This can only be done by the logged in user. Delete a book from
        the cart"
      operationId: deleteBook
      parameters:
      - name: userID
        in: path
        description: "The name of the logged user"
        required: true
        schema:
          type: string
      - name: book
        in: query
        description: "The book the user wants to delete"
        required: true
        schema:
          type: string
          description: "the id/isbn of the selected book"
      responses:
        '200':
          description: 'Book removed successfully'
        '400':
          description: 'Invalid book supplied'
        '404':
          description: 'Book not in the cart'
components:
  parameters:
    title:
      name: title
      in: query
      description: "Book's title. The API responds with a list of results that match a searching word."
      schema:
        type: string
    ISBN:
      name: isbn
      in: query
      description: "Book ISBN. *Example: 9781781102459*. You can call by book ISBN. The API responds with the exact result."
      schema:
        type: string
    author:
      name: author
      in: query
      description: "Book's author Name. The API responds with a list of results that match a searching word."
      schema:
        type: string
    genre:
      name: genre
      in: query
      description: "Book's genre. The API responds with a list of results that match a searching word."
      schema:
        type: string
    theme:
      name: theme
      in: query
      description: "Book's theme. The API responds with a list of results that match a searching word."
      schema:
        type: string
    eventAuthor:
      name: eventAuthor
      in: query
      description: "Author at the event name. The API responds with a list of results that match a searching word."
      schema:
        type: string
    eventBook:
      name: eventBookName
      in: query
      description: "Presented book's name. The API responds with a list of results that match a searching word."
      schema:
        type: string
    eventDate:
      name: eventDate
      in: query
      description: "Event's date. The API responds with a list of results that match a searching word."
      schema:
        type: string
    eventLocation:
      name: eventLocation
      in: query
      description: "Event's location. The API responds with a list of results that match a searching word."
      schema:
        type: string
  schemas:
    Book:
      type: object
      properties:
        ISBN:
          type: string
        title:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        genre:
          type: string
        theme:
          type: string
        price:
          $ref: '#/components/schemas/Amount'
        status:
          type: "string"
          description: "book availability in the inventory"
          enum:
          - "available"
          - "out of stock"
        pages:
          type: integer
          format: int64
      required:
        - ISBN
        - title
        - author
      example:
        ISBN: "84-08-05793-6"
        title: "The shadow of the wind"
        author:
          id : 1
          name: "Carlos Ruiz Zafon"
        genre: "Mystery"
        theme: "Childhood, love, war"
        price:
          value: 19.99
          currency: "eur"
        status: "available"
        page: 565
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        myBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book'
      example:
        id: 1
        name: "Carlos Ruiz Zafon"
        myBooks: "The shadow of the wind, The game of the angel..."
    Amount:
      type: "object"
      required:
      - "currency"
      - "value"
      properties:
        value:
          type: "number"
          format: "double"
          minimum: 0.01
          maximum: 1000000000000000
        currency:
          $ref: '#/components/schemas/Currency'
      description: "Price\n"
      example:
        currency: "eur"
        value: 11
    Currency:
      type: "string"
      pattern: "^[A-Z]{3,3}$"
      description: "some description\n"
      example: "eur"
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/Author'
        book:
          $ref: '#/components/schemas/Book'
        date:
          type: string
        where:
          type: string
      required:
        - id
        - author
        - book
        - date
        - where
      example:
        id : 1
        author :
          id : 1
          name : "Carlos Ruiz Zafon"
        book:
          ISBN: "84-08-05793-6"
          title: "The shadow of the wind"
          author:
            id : 1
            name: "Carlos Ruiz Zafon"
          genre: "Mystery"
          theme: "Childhood, love, war"
          price:
            value: 19.99
            currency: "eur"
          status: "available"
          page: 565
        date: "8-4-2019 15:00"
        where: "Mondadori piazza Duomo (MI)"
    User:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "integer"
          format: "int64"
        creditCard:
          type: "string"
        address:
          type: "string"
      required:
        - username
        - firstName
        - lastName
        - email
        - password
      example:
        id: 1
        username: "testUsername"
        firstName: "testFirstName"
        lastName: "testLastName"
        email: "email_test"
        password: "passw0rd"
        phone : 1234567890
        creditCard: "1234-1234-1234-1234"
        address: "viaTest"
    Cart:
      title: Cart
      type: object
      properties:
        total:
          $ref: '#/components/schemas/Amount'
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
      description: Order of books
      example:
        total:
          currency: eur
          value: 100
        books:
        - id: 1
          title: The shadow of the wind
          author:
            id: 1
            name: Carlos Ruiz Zafon
          genre: Mystery
          theme: Childhood, love, war
          ISBN: 84-08-05793-6
          price:
            value: 19.99
            currency: eur
          status: available
          page: 565
        - id: 1
          title: The shadow of the wind
          author:
            id: 1
            name: Carlos Ruiz Zafon
          genre: Mystery
          theme: Childhood, love, war
          ISBN: 84-08-05793-6
          price:
            value: 19.99
            currency: eur
          status: available
          page: 565
  requestBodies:
    UserBody:
      description: "A JSON object containing user information"
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Login:
      description: "A JSON object containing information to login"
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Saso995/apiSpecification/1.0.0
